{"componentChunkName":"component---src-templates-category-template-js","path":"/posts","result":{"pageContext":{"currentCategory":"All","edges":[{"node":{"id":"3d5e85c5-d899-5d43-85c3-8b04e90cb679","excerpt":"후위 표기식 만들기 후위 표기식은 stack을 이용해 만들 수 있다. 우선 순위라는 키워드에 주목한다면 어떻게 해야하는 지 금방 감이 잡힌다. 만일 10진수 숫자라면 그대로 res에 추가해 준다. 이제 우선 순위대로 만일 (표기를 만난다면 그대로 스택에 넣어준다. 이후, *나 /를 스택에다 넣으려고 할 때, 이 연산자들보다 우선 순위가 같거나 높은 것이 스택 안에 없다면 그대로 넣어 두면 되지만, 만약 높거나 같은 것이 있다면 스택에서 빼내어 연산처리를 해주어야 한다. 즉, 먼저 연산 해주고, 그 다음 들어가는 연산자들에 대해 나중에 처리한다는 것이다. (와 )도 마찬가지로 해주면 된다. 수 찾기(백준 1920) 해당 문제는 퀵소트를 통해 정렬한 후, 이분 탐색을 통해 시간 초과를 막아야 하는 문제이다. 퀵 소트에 대한 알고리즘은 다음과 같다. 특정한 값을 기준으로 큰 숫자와 작은 숫자를 서로 교환한 뒤 배열을 반으로 나눈다는게 기본적인 개념이다. 배열 값을 교환하는 함수는 swa…","fields":{"slug":"/algorithm-1/"},"frontmatter":{"categories":"알/자","title":"코테 준비 - 23/3","date":"March 23, 2023"}},"next":{"fields":{"slug":"/data-engineer-5/"}},"previous":null},{"node":{"id":"c71785d7-0243-5609-ae4b-5b904776f420","excerpt":"제 5장. 빅데이터의 파이프라인 이 장에서는 빅데이터 파이프라인을 자동화하기 위한 구조에 대해 살펴봅니다. 워크플로 관리 워크플로 관리 정해진 업무를 원할하게 진행하기 위한 구조입니다. 워크플로 관리도구의 주요 역할은 정기적으로 태스크를 실행하고 비정상적인 상태를 감지하여 그것에 대한 해결을 돕는 것입니다 오픈 소스 워크플로 관리 도구 예 Airflow : 스크립트 형 Azkaban : 선언 형 Digdag : 선언 형 Luigi : : 스크립트 형 Oozie : 선언 형 태스크 데이터 파이프라인의 실행 과정에서 잇달아 이루어지는 개별 처리입니다. 선언 형 XML이나 YAML 등의 서식으로 워크플로를 기술하는 타입입니다. 미리 제공된 기능만을 사용할 수 있어 단순 반복 생성 워크플로에 최적입니다. 스크립트 형 스크립트 언어로 워크플로를 정의 스크립트 형 도구는 유연성이 좋습니다. 태스크의 정의를 프로그래밍 할 수 있습니다. 즉 ETL 프로세스에서는 스크립트 형의 도구, 그리고 SQ…","fields":{"slug":"/data-engineer-5/"},"frontmatter":{"categories":"Engineer","title":"빅 데이터를 지탱하는 기술 책 리뷰 - (4)","date":"February 25, 2023"}},"next":{"fields":{"slug":"/data-engineer-4/"}},"previous":{"fields":{"slug":"/algorithm-1/"}}},{"node":{"id":"ae0d9aaa-2a95-51c9-bef5-c10a82fd5f13","excerpt":"제 4장. 빅데이터의 축적 객체 스토리지와 데이터 수집 빅데이터의 경우 확장성이 높은 분산 스토리지에 데이터 수집/저장합니다. 우선 기본이 되는 것은 객체 스토리지입니다. 대표적으로 Hadoop의 HDFS, 클라우드 서비스의 Amazon S3가 유명합니다. 이러한 객체 스토리지는 다수의 컴퓨터를 사용해 파일을 여러 디스크에 복사하여 저장합니다. 즉 중복화 및 분산/저장을 실시하나 소규모 데이터에 대해서는 통신오버헤드가 생겨 적합하지는 않죠. 객체 스토리지(분산 스토리지)안에 데이터를 기록/수집하는 것은 어느정도 노력이 필요합니다. 너무 작은 데이터는 모아서 기록하고, 너무 큰 데이터는 분할해서 기록하는 것이 집계 효율을 올리고, 문제를 예방할 수 있습니다. 데이터 수집 수집한 데이터를 가공하여 집계 효율이 좋은 분산 스토리지를 만드는 일련의 프로세스 벌크 형의 데이터 전송 데이터 전송 구조는 벌크 형과 스트리밍 형으로 나뉩니다. 먼저 벌크 형의 데이터 전송 구조는 ETL 서버 설치…","fields":{"slug":"/data-engineer-4/"},"frontmatter":{"categories":"Engineer","title":"빅 데이터를 지탱하는 기술 책 리뷰 - (3)","date":"February 16, 2023"}},"next":{"fields":{"slug":"/data-engineer-3/"}},"previous":{"fields":{"slug":"/data-engineer-5/"}}},{"node":{"id":"8946dc13-6971-5972-8900-d850c5b3b049","excerpt":"제 3장. 빅데이터의 분산처리 스키마 테이블의 칼럼 명과 데이터형, 테이블 간의 관계 등 구조화된 데이터 스키마가 명확하게 정의된 데이터 비구조화 데이터 스키마가 없는 데이터 데이터 레이크 비구조화 데이터를 분산 스토리지에 저장하고 그것을 분산 시스템에서 처리하는 것 스키마리스 데이터 CSV, JSON, XML 등의 데이터와 같이 서식은 정해져 있지만, 칼럼 수나 데이터 형은 명확하지 않은 데이터 비구조화 데이터에서 구조화 데이터로 변환하고 일반적으로 구조화 데이터를 열 지향 스토리지로 저장합니다. 이를 위해 MPP 데이터베이스로 전송하거나 Hadoop 상에서 열 지향 스토리지 형식으로 변환합니다. Hadoop에서는 사용자가 직접 열 지향 스토리지 형식을 지정할 수 있고 그 특징이 다릅니다. Apache ORC : 구조화 데이터를 위한 열 지향 스토리지 Apache Parquet : 스키마리스 데이터 구조 처리 가능 Hadoop : 단일 소프트웨어가 아닌 분산 시스템을 구성하는 다…","fields":{"slug":"/data-engineer-3/"},"frontmatter":{"categories":"Engineer","title":"빅 데이터를 지탱하는 기술 책 리뷰 - (2)","date":"February 13, 2023"}},"next":{"fields":{"slug":"/data-engineering-1/"}},"previous":{"fields":{"slug":"/data-engineer-4/"}}},{"node":{"id":"1b215349-3833-5501-8d2a-d9c2fe3aff0f","excerpt":"이 책은 빅데이터를 다루는 엔지니어와 작업을 자동화하고 싶은 데이터 과학자를 주요 대상으로 합니다. 데이터를 수집하고 원하는 형태로 구축하는 것에 있어 초입자인 저에게 있어 많은 깨달음을 준 책이기도 합니다. 책의 구성은 다음과 같습니다. 제1장은 ‘빅데이터의 기초지식’ 제2장 ‘빅데이터의 검색’에서는 데이터의 ‘대화적인 집계와 시각화’ 및 ‘데이터 마트’의 성질 제3장 ‘빅데이터 분산 처리’를 위한 Hadoop(하둡)과 Spark(스파크) 등의 ‘분산 처리 프레임워크’를 통해 데이터 가공 및 집계, 데이터 마트를 만들어내는 프로세스를 설명합니다. 제4장 ‘빅데이터 축적’은 데이터를 수집해서 보존하는 절차를 설명합니다. 여기서는 몇몇 분산 스토리지의 특징을 다루고 분산 스토리지에 데이터를 넣는 ‘데이터 수집’에 관해 설명합니다. 제5장 ‘빅데이터 파이프라인’은 데이터 처리를 자동화하는 절차를 설명합니다. 정기적으로 스케쥴이 실행되는 ‘배치 처리’와 끊임없이 실행되는 ‘스트림 처리’…","fields":{"slug":"/data-engineering-1/"},"frontmatter":{"categories":"Engineer","title":"빅 데이터를 지탱하는 기술 책 리뷰 - (1)","date":"February 09, 2023"}},"next":{"fields":{"slug":"/data-engineering-2/"}},"previous":{"fields":{"slug":"/data-engineer-3/"}}},{"node":{"id":"420e3389-935f-5b6c-935c-8514e9cad73c","excerpt":"개념적 데이터 모델링 -> 논리적 데이터 모델링 -> 물리적 데이터 모델링 개념적 모델링 Entity Relationship Diagram 정보를 발견하고 다른 사람들에게 표현할 수 있게 도와줌 서로 연관된 정보를 그룹하고 인지하여 다른 사람들에 표현 정보 그룹 사이의 관계를 인식하고 다른 사람들에게 표현 RDB는 내포 관계를 포함하지 않는다. 거대 단일 테이블로 표현을 하면 중복이 발생한다. 그래서 데이터를 분할한다. 장점 주제 별로 나눌 수 있다. join을 통해서 원하는 테이블을 적절하게 만들 수 있다. 이렇게 찾아 낸 개념을 ERD에서는 Entity라고 부르고 이는 결국 Table로 전환된다. 예를 들어 저자, 글, 댓글이라는 Entity가 있다고 보자. Entity 내부에 있는 구체적인 정보(예를 들어 글 안에 제목, 본문 생성일 등)를 Attribute(속성)이라고 부른다. 각 저자, 글, 댓글이라는 Entity는 각각 쓰다 혹은 소속되다라는 관계 혹은 Relation이…","fields":{"slug":"/data-engineering-2/"},"frontmatter":{"categories":"Engineer","title":"데이터베이스 기본에 대하여","date":"February 04, 2023"}},"next":{"fields":{"slug":"/data-science-2/"}},"previous":{"fields":{"slug":"/data-engineering-1/"}}},{"node":{"id":"1714b680-a0e8-57c1-85a3-9a79e189b356","excerpt":"1. 개요 웹 스크래핑에 있어 파이썬은 너무나도 최고의 도구입니다. selenium, scrapy, beautifulsoup 등의 모듈은 스크래핑 과정을 간편화 해줍니다. 뿐만 아니라 파이썬의 데이터 분석 도구(numpy, pandas, 시각화를 원한다면 matplotlib 등)는 데이터를 추가적으로 가공하고 원하는 DB형태로 만들기 쉽습니다. 하지만 파이썬의 대표적인 GUI모듈인 tkinter, PyQt5 같은 도구들은 javascript로 만드는 웹앱 등에 비해서는 표현할 수 있는 형태도 한정적이고 무엇보다 디자인적으로 예쁘지 않습니다. nextron(next.js + electron.js)으로 만드는 웹 앱은 main이라는 벡엔드 서버와 renderer라는 화면에 표현되는 프론트 부분으로 나뉩니다. REST API로 벡엔드 서버와 통신하는 웹 프로그래밍과는 달리 nextron(electron도 동일)은 ipc 통신(프로세스 간의 통신 지원)을 통해서 벡엔드 서버와 통신합니다.…","fields":{"slug":"/data-science-2/"},"frontmatter":{"categories":"WEB-DEV","title":"Nextron + playwright를 통한 크롤링 웹앱","date":"December 21, 2022"}},"next":{"fields":{"slug":"/web-dev-4/"}},"previous":{"fields":{"slug":"/data-engineering-2/"}}},{"node":{"id":"ab869cab-179b-515d-bb18-07ccd0144ae9","excerpt":"Next.js 13 버전의 대표적인 변화점 공식문서에서 설명하는 Next.js의 대표적인 변화는 다음과 같습니다. app/Directory(beta) : 파일 기반 라우팅에서 디렉터리 기반 라우팅으로 바뀌었다는 점, app 디렉터리 안에 파일들은 기본적으로 Server Component라는 점 기존에 사용하던 파일 기반 라우팅 구조에서 app 디렉토리 하위에 디렉토리를 기반으로 하는 라우팅 구조로 바뀌었습니다. 한 디렉토리에서 테스트, 스타일, 레이아웃, 부가적인 관련 컴포넌트를 전부 함께 배치하라는 것 같습니다. 익숙해지면 나름 편리할 듯 합니다. app 디렉터리 안에서는 리액트 서버 컴포넌트를 사용합니다. 이는 React 18에 도입되는 최신 기술이며 서버에서 동작합니다. 즉, 서버에서 데이터 패칭 등 수행하고, 클라이언트에서 연속된 API 호출을 막을 수 있습니다. 그 이외에 app 디렉토리 안에 넣을 수 있는 몇 가지 지정 키워드 파일이 있습니다. Layout Page Lo…","fields":{"slug":"/web-dev-4/"},"frontmatter":{"categories":"WEB-DEV","title":"Next.js 13 버전 가볍게 정리","date":"December 09, 2022"}},"next":{"fields":{"slug":"/web-dev-3/"}},"previous":{"fields":{"slug":"/data-science-2/"}}},{"node":{"id":"3ce9d2b2-ef6a-5bbf-905b-1b606cf1aeb4","excerpt":"아래는 인증을 위한 전역 컨텍스트를 모아둔 파일입니다. firebase의 auth 함수들을 이용해 인증 상태를 관리합니다. 그리고 그 결과를 전역 컨텍스트 createContext()를 만들어 Provider안에 value로 전달해 전역적으로 적용 되게끔 합니다. 커스텀 app.tsx는 다음과 같습니다. 이렇게 프로바이더로 감싸주면, 전역 컨텍스트가 children으로 전달됩니다. 로그인, 로그아웃, 회원가입 함수가 포함된 전역 컨텍스트를 사용하는 방법은 다음과 같습니다. 사실 이미 함수를 컨텍스트에 선언해 두었기에 바로 접근이 가능합니다. 페이지 접근 제한은 _app.tsx에서 설정합니다. 위처럼 접근 제한 url을 설정한 뒤, 함수를 통해 현재 url이 접근 제한되는 url이라면, 따로 다른 Route 컴포넌트로 처리해주는데, 이는 위처럼 useEffect와 router를 통해서 login으로 푸쉬해 줍니다.","fields":{"slug":"/web-dev-3/"},"frontmatter":{"categories":"WEB-DEV","title":"Next.js Firebase 인증정보를 Context로 관리하기","date":"November 17, 2022"}},"next":{"fields":{"slug":"/web-dev-2/"}},"previous":{"fields":{"slug":"/web-dev-4/"}}},{"node":{"id":"0f74b1ac-d800-54f2-bfbd-9c628def8f9e","excerpt":"Firebase Doc 정리해보기 기본적으로 소규모 스타트업에서 벡엔드를 직접 구축한다면 서버 인프라 관리부터 서버단/클라이언트 개발을 모두 신경써야 합니다.\r\n소규모 인원으로 프로젝트를 진행한다면 사용자 피드백을 받아들이기 매우 버겁죠. 하지만 Firebase를 이용한다면 Database, Storage, Auth, Analytics까지 제공해주기 때문에 벡엔드에 대한 큰 고민 없이 서비스를 제작할 수 있습니다. 1. Firebase 연동 연동을 위해서는 Firebase 홈페이지에서 SDK를 통해 연동을 해주어야 합니다. 프로젝트 만들기를 통해 firebase 프로젝트를 만들어 주세요. 그리고 프로젝트 설정에서 웹앱 만들기로 들어가 주어지는 코드를 루트 폴더의 firebase.ts에 입력해 줍니다. 이제 원하는 프로젝트의 빌드 제품을 사용하기 위해서 일련의 설정을 해야합니다. 우선 firebase.ts의 가장 아래쪽을 위 문장으로 수정해줍니다. 이는 앱이 구성되어 있지 않으면 새…","fields":{"slug":"/web-dev-2/"},"frontmatter":{"categories":"WEB-DEV","title":"Firebase - Firestore와 Storage 사용법","date":"November 17, 2022"}},"next":{"fields":{"slug":"/web-dev-1/"}},"previous":{"fields":{"slug":"/web-dev-3/"}}},{"node":{"id":"5763bf30-1706-5bff-81c9-0201a7ea0057","excerpt":"사용한 기술 스택 tailwindcss : 조금 외우기만 하면 빠르고 간편하고 수정도 쉽고 next.js와 호환성도 좋습니다. sanity.io : 벡엔드없이 비개발자가 컨텐츠 관리를 쉽게 할 수 있는 Headless CMS입니다. vercel : 원클릭으로 정적 컨텐츠를 쉽게 배포할 수 있는 호스팅 사이트입니다. 애니메이션 처리 framer-motion : 애니메이션을 위한 패키지로 css 상태 값을 부드럽게 연결해 줍니다. react-simple-typewriter : Typewriter훅과 Cursor를 통해 쉽게 TypeWrite 효과를 줄 수 있는 패키지입니다. tailwind-scrollbar : tailwind를 통해 커스텀 스크롤바를 설정할 수 있습니다. tailwindcss에 대한 소감 우선 tailwindcss는 굉장히 편리합니다. styled-components나 emotion과 비교한다면 가독성면에서는 조금 뒤쳐질지라도 컴포넌트를 나누어 코드를 분할한다면 크게…","fields":{"slug":"/web-dev-1/"},"frontmatter":{"categories":"WEB-DEV","title":"Next.js와 Sanity로 포트폴리오 사이트 만들기","date":"October 26, 2022"}},"next":{"fields":{"slug":"/data-science-1/"}},"previous":{"fields":{"slug":"/web-dev-2/"}}},{"node":{"id":"2f71d669-43bc-5f93-8d6d-d0ffa0cef45a","excerpt":"1.계기 한/글 문서에는 글자를 한번에 바꿔주는 기능은 있으나, 한번에 그림을 바꾸진 못합니다. 마침 pyautogui의 locateOnScreen 함수를 이용하면 이를 보완하는 것이 가능할 것 같았습니다. 2.설계 처음보는 누구나 사용할 수 있도록 파이썬 내장 모듈인 tkinter와 PIL인 pillow를 이용해서 GUI 형식으로 만들었습니다. 한/글 문서의 한번에 바꾸기에서 바꿀 글자와 바꾼 글자를 입력해야 하듯이 GUI내에서도 바꿀 이미지와 바꾼이미지를 입력받습니다. 캡처 도구의 이용 이미지는 가지고 있는 노트북 혹은 컴퓨터의 모니터 크기에 따라 크기가 달라집니다. 또한 한/글 문서의 확대 수준에 따라서도 바뀝니다. 이는 이미지를 인식하는데 있어 정확도를 감소시킵니다. 따라서 윈도우에 내장되어 있는 캡처도구를 통해 이미지의 규격을 각 기기마다 통일 시켜야합니다. 뿐만 아니라 셀 안의 이미지를 삽입하는 경우, 사진이 한쪽으로 쏠리기도 합니다. 번거롭지만 이미지의 가로/세로 크기…","fields":{"slug":"/data-science-1/"},"frontmatter":{"categories":"Data-Science","title":"Python - 화면 인식을 통한 자동화 프로그램 만들기","date":"October 18, 2022"}},"next":null,"previous":{"fields":{"slug":"/web-dev-1/"}}}],"categories":["All","알/자","Engineer","WEB-DEV","Data-Science"]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}